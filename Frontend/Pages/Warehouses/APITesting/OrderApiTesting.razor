@page "/order-api-testing"
@using System.Net.Http.Json
@using MudBlazor
@using softserve.projectlabs.Shared.DTOs
@inject HttpClient Http

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5" Class="mb-4">Order API Testing</MudText>
    <MudExpansionPanels>

        <!-- 1. Get Order By ID -->
        <MudExpansionPanel Text="Get Order By ID">
            <MudTextField @bind-Value="getOrderId" Label="Order ID" Required="true" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetOrderById" Class="mt-2">Send Request</MudButton>
            @if (orderById != null)
            {
                <MudCard>
                    <MudCardContent>
                        <MudText><b>ID:</b> @orderById.OrderId</MudText>
                        <MudText><b>CustomerId:</b> @orderById.CustomerId</MudText>
                        <MudText><b>Date:</b> @orderById.OrderDate</MudText>
                        <MudText><b>Status:</b> @orderById.OrderStatus</MudText>
                        <MudText><b>Total:</b> @orderById.TotalAmount</MudText>
                        <MudText><b>Created:</b> @orderById.CreatedAt</MudText>
                        <MudText><b>Updated:</b> @orderById.UpdatedAt</MudText>
                        <MudText><b>IsDeleted:</b> @orderById.IsDeleted</MudText>
                        <MudText Typo="Typo.subtitle2" Class="mt-2">Items:</MudText>
                        <MudList T="OrderItemDto">
                            @foreach (var item in orderById.Items)
                            {
                                <MudListItem T="OrderItemDto" Value="item">
                                    @item.ItemName (SKU: @item.Sku, Qty: @item.Quantity, Price: @item.UnitPrice)
                                </MudListItem>
                            }
                        </MudList>

                    </MudCardContent>
                </MudCard>
            }
            else if (!string.IsNullOrEmpty(getOrderByIdResponse))
            {
                <MudText>@getOrderByIdResponse</MudText>
            }
        </MudExpansionPanel>

        <!-- 2. Get All Orders -->
        <MudExpansionPanel Text="Get All Orders">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetAllOrders">Send Request</MudButton>
            @if (allOrders != null)
            {
                <MudTable Items="allOrders">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>CustomerId</MudTh>
                        <MudTh>Date</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Total</MudTh>
                        <MudTh>IsDeleted</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.OrderId</MudTd>
                        <MudTd>@context.CustomerId</MudTd>
                        <MudTd>@context.OrderDate</MudTd>
                        <MudTd>@context.OrderStatus</MudTd>
                        <MudTd>@context.TotalAmount</MudTd>
                        <MudTd>@context.IsDeleted</MudTd>
                    </RowTemplate>
                </MudTable>
            }
            else if (!string.IsNullOrEmpty(getAllOrdersResponse))
            {
                <MudText>@getAllOrdersResponse</MudText>
            }
        </MudExpansionPanel>

        <!-- 3. Update Order -->
        <MudExpansionPanel Text="Update Order">
            <MudForm @ref="updateOrderForm">
                <MudTextField @bind-Value="updateOrderId" Label="Order ID" Required="true" />
                <MudTextField @bind-Value="updateOrderDto.CustomerId" Label="Customer ID" Required="true" />
                <MudTextField @bind-Value="updateOrderDto.OrderStatus" Label="Order Status" Required="true" />
                <MudTextField @bind-Value="updateOrderDto.TotalAmount" Label="Total Amount" Required="true" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateOrder" Class="mt-2">Send Request</MudButton>
            </MudForm>
            @if (updateOrderResponse != null)
            {
                <MudPaper Class="pa-2 mt-2">
                    <MudText>@updateOrderResponse</MudText>
                </MudPaper>
            }
        </MudExpansionPanel>

        <!-- 4. Delete Order -->
        <MudExpansionPanel Text="Delete Order">
            <MudTextField @bind-Value="deleteOrderId" Label="Order ID" Required="true" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DeleteOrder" Class="mt-2">Send Request</MudButton>
            @if (deleteOrderResponse != null)
            {
                <MudPaper Class="pa-2 mt-2">
                    <MudText>@deleteOrderResponse</MudText>
                </MudPaper>
            }
        </MudExpansionPanel>

        <!-- 5. Fulfill Order -->
        <MudExpansionPanel Text="Fulfill Order">
            <MudTextField @bind-Value="fulfillOrderId" Label="Order ID" Required="true" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FulfillOrder" Class="mt-2">Send Request</MudButton>
            @if (fulfillOrderResponse != null)
            {
                <MudPaper Class="pa-2 mt-2">
                    <MudText>@fulfillOrderResponse</MudText>
                </MudPaper>
            }
        </MudExpansionPanel>

        <!-- 6. Retrieve Order By Cart ID -->
        <MudExpansionPanel Text="Get Order By Cart ID">
            <MudTextField @bind-Value="cartId" Label="Cart ID" Required="true" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetOrderByCartId" Class="mt-2">Send Request</MudButton>
            @if (orderByCartId != null)
            {
                <MudCard>
                    <MudCardContent>
                        <MudText><b>ID:</b> @orderByCartId.OrderId</MudText>
                        <MudText><b>CustomerId:</b> @orderByCartId.CustomerId</MudText>
                        <MudText><b>Date:</b> @orderByCartId.OrderDate</MudText>
                        <MudText><b>Status:</b> @orderByCartId.OrderStatus</MudText>
                        <MudText><b>Total:</b> @orderByCartId.TotalAmount</MudText>
                        <MudText Typo="Typo.subtitle2" Class="mt-2">Items:</MudText>
                        <MudList T="OrderItemDto">
                            @foreach (var item in orderByCartId.Items)
                            {
                                <MudListItem T="OrderItemDto" Value="item">
                                    @item.ItemName (SKU: @item.Sku, Qty: @item.Quantity, Price: @item.UnitPrice)
                                </MudListItem>
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            }
            else if (!string.IsNullOrEmpty(getOrderByCartIdResponse))
            {
                <MudText>@getOrderByCartIdResponse</MudText>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
</MudPaper>

@code {
    // --- Get Order By ID ---
    private int getOrderId;
    private OrderDto? orderById;
    private string? getOrderByIdResponse;

    private async Task GetOrderById()
    {
        orderById = null;
        getOrderByIdResponse = null;
        try
        {
            orderById = await Http.GetFromJsonAsync<OrderDto>($"api/orders/{getOrderId}");
            if (orderById == null)
                getOrderByIdResponse = "Order not found.";
        }
        catch (Exception ex)
        {
            getOrderByIdResponse = $"Exception: {ex.Message}";
        }
    }

    // --- Get All Orders ---
    private List<OrderDto>? allOrders;
    private string? getAllOrdersResponse;

    private async Task GetAllOrders()
    {
        allOrders = null;
        getAllOrdersResponse = null;
        try
        {
            allOrders = await Http.GetFromJsonAsync<List<OrderDto>>("api/orders");
            if (allOrders == null || allOrders.Count == 0)
                getAllOrdersResponse = "No orders found.";
        }
        catch (Exception ex)
        {
            getAllOrdersResponse = $"Exception: {ex.Message}";
        }
    }

    // --- Update Order ---
    private MudForm? updateOrderForm;
    private int updateOrderId;
    private OrderDto updateOrderDto = new() { Items = new List<OrderItemDto>() };
    private string? updateOrderResponse;

    private async Task UpdateOrder()
    {
        updateOrderResponse = null;
        await updateOrderForm?.Validate();
        try
        {
            updateOrderDto.OrderId = updateOrderId;
            var result = await Http.PutAsJsonAsync($"api/orders/{updateOrderId}", updateOrderDto);
            if (result.IsSuccessStatusCode)
            {
                updateOrderResponse = "Order updated successfully.";
            }
            else
            {
                var content = await result.Content.ReadAsStringAsync();
                updateOrderResponse = $"Error: {content}";
            }
        }
        catch (Exception ex)
        {
            updateOrderResponse = $"Exception: {ex.Message}";
        }
    }

    // --- Delete Order ---
    private int deleteOrderId;
    private string? deleteOrderResponse;

    private async Task DeleteOrder()
    {
        deleteOrderResponse = null;
        try
        {
            var result = await Http.DeleteAsync($"api/orders/{deleteOrderId}");
            if (result.IsSuccessStatusCode)
            {
                deleteOrderResponse = "Order deleted successfully.";
            }
            else
            {
                var content = await result.Content.ReadAsStringAsync();
                deleteOrderResponse = $"Error: {content}";
            }
        }
        catch (Exception ex)
        {
            deleteOrderResponse = $"Exception: {ex.Message}";
        }
    }

    // --- Fulfill Order ---
    private int fulfillOrderId;
    private string? fulfillOrderResponse;

    private async Task FulfillOrder()
    {
        fulfillOrderResponse = null;
        try
        {
            var result = await Http.PostAsync($"api/orders/{fulfillOrderId}/fulfill", null);
            if (result.IsSuccessStatusCode)
            {
                fulfillOrderResponse = "Order fulfilled successfully.";
            }
            else
            {
                var content = await result.Content.ReadAsStringAsync();
                fulfillOrderResponse = $"Error: {content}";
            }
        }
        catch (Exception ex)
        {
            fulfillOrderResponse = $"Exception: {ex.Message}";
        }
    }

    // --- Get Order By Cart ID ---
    private int cartId;
    private OrderDto? orderByCartId;
    private string? getOrderByCartIdResponse;

    private async Task GetOrderByCartId()
    {
        orderByCartId = null;
        getOrderByCartIdResponse = null;
        try
        {
            orderByCartId = await Http.GetFromJsonAsync<OrderDto>($"api/orders/cart/{cartId}");
            if (orderByCartId == null)
                getOrderByCartIdResponse = "Order not found for this cart.";
        }
        catch (Exception ex)
        {
            getOrderByCartIdResponse = $"Exception: {ex.Message}";
        }
    }
}
