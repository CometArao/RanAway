@page "/supplier-api-testing"
@using System.Net.Http.Json
@using MudBlazor
@using softserve.projectlabs.Shared.DTOs
@using softserve.projectlabs.Shared.DTOs.Supplier
@inject HttpClient Http

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5" Class="mb-4">Supplier API Testing</MudText>
    <MudExpansionPanels>

        <!-- 1. Add Supplier -->
        <MudExpansionPanel Text="Add Supplier">
            <MudForm @ref="addSupplierForm">
                <MudTextField @bind-Value="addSupplierDto.Name" Label="Name" Required="true" />
                <MudTextField @bind-Value="addSupplierDto.ContactEmail" Label="Contact Email" Required="true" />
                <MudTextField @bind-Value="addSupplierDto.ContactNumber" Label="Contact Number" Required="true" />
                <MudTextField @bind-Value="addSupplierDto.Address" Label="Address" Required="true" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddSupplier" Class="mt-2">Send Request</MudButton>
            </MudForm>
            @if (addSupplierResponse != null)
            {
                <MudPaper Class="pa-2 mt-2">
                    <MudText>@addSupplierResponse</MudText>
                </MudPaper>
            }
        </MudExpansionPanel>

        <!-- 2. Update Supplier -->
        <MudExpansionPanel Text="Update Supplier">
            <MudForm @ref="updateSupplierForm">
                <MudTextField @bind-Value="updateSupplierId" Label="Supplier ID" Required="true" />
                <MudTextField @bind-Value="updateSupplierDto.Name" Label="Name" Required="true" />
                <MudTextField @bind-Value="updateSupplierDto.ContactEmail" Label="Contact Email" Required="true" />
                <MudTextField @bind-Value="updateSupplierDto.ContactNumber" Label="Contact Number" Required="true" />
                <MudTextField @bind-Value="updateSupplierDto.Address" Label="Address" Required="true" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateSupplier" Class="mt-2">Send Request</MudButton>
            </MudForm>
            @if (updateSupplierResponse != null)
            {
                <MudPaper Class="pa-2 mt-2">
                    <MudText>@updateSupplierResponse</MudText>
                </MudPaper>
            }
        </MudExpansionPanel>

        <!-- 3. Get Supplier By ID -->
        <MudExpansionPanel Text="Get Supplier By ID">
            <MudTextField @bind-Value="getSupplierId" Label="Supplier ID" Required="true" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetSupplierById" Class="mt-2">Send Request</MudButton>
            @if (supplierById != null)
            {
                <MudCard>
                    <MudCardContent>
                        <MudText><b>ID:</b> @supplierById.SupplierId</MudText>
                        <MudText><b>Name:</b> @supplierById.Name</MudText>
                        <MudText><b>Email:</b> @supplierById.ContactEmail</MudText>
                        <MudText><b>Number:</b> @supplierById.ContactNumber</MudText>
                        <MudText><b>Address:</b> @supplierById.Address</MudText>
                        <MudText><b>Created:</b> @supplierById.CreatedAt</MudText>
                        <MudText><b>Updated:</b> @supplierById.UpdatedAt</MudText>
                    </MudCardContent>
                </MudCard>
            }
            else if (!string.IsNullOrEmpty(getSupplierByIdResponse))
            {
                <MudText>@getSupplierByIdResponse</MudText>
            }
        </MudExpansionPanel>

        <!-- 4. Get All Suppliers -->
        <MudExpansionPanel Text="Get All Suppliers">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetAllSuppliers">Send Request</MudButton>
            @if (allSuppliers != null)
            {
                <MudTable Items="allSuppliers">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Number</MudTh>
                        <MudTh>Address</MudTh>
                        <MudTh>Created</MudTh>
                        <MudTh>Updated</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.SupplierId</MudTd>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>@context.ContactEmail</MudTd>
                        <MudTd>@context.ContactNumber</MudTd>
                        <MudTd>@context.Address</MudTd>
                        <MudTd>@context.CreatedAt</MudTd>
                        <MudTd>@context.UpdatedAt</MudTd>
                    </RowTemplate>
                </MudTable>
            }
            else if (!string.IsNullOrEmpty(getAllSuppliersResponse))
            {
                <MudText>@getAllSuppliersResponse</MudText>
            }
        </MudExpansionPanel>

        <!-- 5. Remove Supplier -->
        <MudExpansionPanel Text="Remove Supplier">
            <MudTextField @bind-Value="removeSupplierId" Label="Supplier ID" Required="true" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RemoveSupplier" Class="mt-2">Send Request</MudButton>
            @if (removeSupplierResponse != null)
            {
                <MudPaper Class="pa-2 mt-2">
                    <MudText>@removeSupplierResponse</MudText>
                </MudPaper>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
</MudPaper>

@code {
    // --- Add Supplier ---
    private MudForm? addSupplierForm;
    private SupplierDto addSupplierDto = new();
    private string? addSupplierResponse;

    /// <summary>
    /// Calls the API to add a new supplier.
    /// </summary>
    private async Task AddSupplier()
    {
        addSupplierResponse = null;
        await addSupplierForm?.Validate();
        try
        {
            var result = await Http.PostAsJsonAsync("api/suppliers", addSupplierDto);
            if (result.IsSuccessStatusCode)
            {
                addSupplierResponse = "Supplier added successfully.";
            }
            else
            {
                var content = await result.Content.ReadAsStringAsync();
                addSupplierResponse = $"Error: {content}";
            }
        }
        catch (Exception ex)
        {
            addSupplierResponse = $"Exception: {ex.Message}";
        }
    }

    // --- Update Supplier ---
    private MudForm? updateSupplierForm;
    private int updateSupplierId;
    private SupplierDto updateSupplierDto = new();
    private string? updateSupplierResponse;

    /// <summary>
    /// Calls the API to update an existing supplier.
    /// </summary>
    private async Task UpdateSupplier()
    {
        updateSupplierResponse = null;
        await updateSupplierForm?.Validate();
        try
        {
            updateSupplierDto.SupplierId = updateSupplierId;
            var result = await Http.PutAsJsonAsync($"api/suppliers/{updateSupplierId}", updateSupplierDto);
            if (result.IsSuccessStatusCode)
            {
                updateSupplierResponse = "Supplier updated successfully.";
            }
            else
            {
                var content = await result.Content.ReadAsStringAsync();
                updateSupplierResponse = $"Error: {content}";
            }
        }
        catch (Exception ex)
        {
            updateSupplierResponse = $"Exception: {ex.Message}";
        }
    }

    // --- Get Supplier By ID ---
    private int getSupplierId;
    private SupplierDto? supplierById;
    private string? getSupplierByIdResponse;

    /// <summary>
    /// Calls the API to get a supplier by its ID.
    /// </summary>
    private async Task GetSupplierById()
    {
        supplierById = null;
        getSupplierByIdResponse = null;
        try
        {
            supplierById = await Http.GetFromJsonAsync<SupplierDto>($"api/suppliers/{getSupplierId}");
            if (supplierById == null)
            {
                getSupplierByIdResponse = "Supplier not found.";
            }
        }
        catch (Exception ex)
        {
            getSupplierByIdResponse = $"Exception: {ex.Message}";
        }
    }

    // --- Get All Suppliers ---
    private List<SupplierDto>? allSuppliers;
    private string? getAllSuppliersResponse;

    /// <summary>
    /// Calls the API to get all suppliers.
    /// </summary>
    private async Task GetAllSuppliers()
    {
        allSuppliers = null;
        getAllSuppliersResponse = null;
        try
        {
            allSuppliers = await Http.GetFromJsonAsync<List<SupplierDto>>("api/suppliers");
            if (allSuppliers == null || allSuppliers.Count == 0)
            {
                getAllSuppliersResponse = "No suppliers found.";
            }
        }
        catch (Exception ex)
        {
            getAllSuppliersResponse = $"Exception: {ex.Message}";
        }
    }

    // --- Remove Supplier ---
    private int removeSupplierId;
    private string? removeSupplierResponse;

    /// <summary>
    /// Calls the API to delete a supplier by its ID.
    /// </summary>
    private async Task RemoveSupplier()
    {
        removeSupplierResponse = null;
        if (removeSupplierId <= 0)
        {
            removeSupplierResponse = "Please enter a valid Supplier ID.";
            return;
        }
        try
        {
            var result = await Http.DeleteAsync($"api/suppliers/{removeSupplierId}");
            if (result.IsSuccessStatusCode)
            {
                removeSupplierResponse = "Supplier removed successfully.";
            }
            else
            {
                var content = await result.Content.ReadAsStringAsync();
                removeSupplierResponse = $"Error: {content}";
            }
        }
        catch (Exception ex)
        {
            removeSupplierResponse = $"Exception: {ex.Message}";
        }
    }
}
